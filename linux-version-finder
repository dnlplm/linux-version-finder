#!/usr/bin/env python3

from __future__ import annotations

import collections
import logging
import os.path
import re
import subprocess
import sys
from typing import List

import typer
from tqdm import tqdm


def linux_version_finder_single(single_script_path: str, commit: str) -> list[str]:
    """Retrieve Linux versions for a single commit

    Find the Linux versions where a commit is present or was backported"""
    completedProcess = subprocess.run(
        [single_script_path, commit],
        capture_output=True,
        check=True,
    )
    output = completedProcess.stdout.decode("utf-8")
    return output.split()


def get_minor_version(version: str) -> str:
    """Retrieve the Linux minor/major version

    Strip the suffix of "-rcX" or patch version ".X".
    E.g. "v5.9-rc2" -> "v5.9"
    E.g. "v3.2.1" -> "v3.2"."""
    m = re.match(r"^(v\d+\.\d+)", version)
    if not m:
        sys.exit("error: the " + version + " tag use an unexpected format")
    return m.group(1)


def get_minor_versions() -> list[str]:
    """Get complete list of minor/major versions

    E.g. ["v3.0", "v3.1", "v3.2"]."""
    completedProcess = subprocess.run(
        "git tag -l 'v*' | cut -d. -f-2 | cut -d- -f1 | sort -u -V | xargs",
        capture_output=True,
        check=True,
        shell=True,
    )
    return list(completedProcess.stdout.decode("utf-8").split())


def version_key(version: str) -> int:
    """Transform the Linux version in a integer

    This is done in order to compare the Linux versions."""
    m = re.match(r"^v\d+\.\d+\-rc(\d+)", version)
    if m:
        return int(m.group(1))

    m = re.match(r"^v\d+\.\d+\.(\d+)", version)
    if not m:
        sys.exit("error: the " + version + " tag use an unexpected format")
    return int(m.group(1)) * 10


def find_commits_versions(
    commits: list[str], all: bool, single_script_path: str
) -> tuple[list[str], dict[str, list]]:
    """Find all the versions associated to the commits

    This is the first half of the tool and the part the require almost all the cpu/mem"""
    minor_versions = get_minor_versions()
    versions_count = collections.defaultdict(list)
    for commit in tqdm(commits):
        minor_version = ""
        versions = linux_version_finder_single(single_script_path, commit)
        for version in versions:
            minor_version = get_minor_version(version)
            if all:
                # If the --no-all option isn't used add the version
                # because we need to know the version where the commit
                # was merged.
                versions_count[minor_version].append(version)
            else:
                # If the --no-all option is used add the sha1 of the
                # commit because we need to know which commit was
                # merged/backported.
                versions_count[minor_version].append(commit)
        if minor_version:
            start = minor_versions.index(minor_version) + 1
            for i in range(start, len(minor_versions)):
                minor_version = minor_versions[i]
                if all:
                    versions_count[minor_version].append(minor_version + "-rc0")
                else:
                    versions_count[minor_version].append(commit)
    return minor_versions, versions_count


def print_versions_with_all_commits(
    commits: list[str], minor_versions: list[str], versions_count: dict[str, list]
) -> None:
    """Print Linux versions that contains all the commits"""
    len_commits = len(commits)
    first = True
    for minor_version in reversed(minor_versions):
        minor_version_count = versions_count[minor_version]
        if len_commits == len(minor_version_count):
            version = max(minor_version_count, key=version_key)
            if not version.endswith("rc0"):
                if first:
                    print(version, end="")
                    first = False
                else:
                    print("", version, end="")
    print("")


def get_short_sha(commit: str) -> str:
    """Get a short unique sha

    E.g. 51b6489 instead of 51b6489bbe2d5433993c7e6dcf5a99039760d3b0."""
    completedProcess = subprocess.run(
        ["git", "rev-parse", "--short", commit],
        capture_output=True,
        check=True,
    )
    return completedProcess.stdout.decode("utf-8").strip()


def print_versions_without_all_commits(
    commits: list[str], minor_versions: list[str], versions_count: dict[str, list]
) -> None:
    """Print Linux versions that don't contain all the commits"""
    len_commits = len(commits)
    short_sha = {commit: get_short_sha(commit) for commit in commits}

    for minor_version in reversed(minor_versions):
        minor_version_count = versions_count[minor_version]
        if len_commits > len(minor_version_count):
            print(f"{minor_version}:\t", end="")
            # to speed up the check use a set
            set_commits_presents = set(minor_version_count)
            missing_commits = [x for x in commits if x not in set_commits_presents]
            for commit in missing_commits:
                short = short_sha[commit]
                print(f" {short}", end="")
            print("")


def main(
    commits: List[str],
    all: bool = typer.Option(True, help="Print the versions with all commits."),
    debug: bool = typer.Option(False, help="Print debug info."),
):
    if debug:
        logging.basicConfig(level=logging.DEBUG)
    single_script_path = os.path.dirname(sys.argv[0]) + "/linux-version-finder-single"
    minor_versions, versions_count = find_commits_versions(
        commits, all, single_script_path
    )
    logging.debug(versions_count)

    if all:
        print_versions_with_all_commits(commits, minor_versions, versions_count)
    else:
        print_versions_without_all_commits(commits, minor_versions, versions_count)


if __name__ == "__main__":
    typer.run(main)
