#!/usr/bin/env python3

from __future__ import annotations

import collections
import logging
import os.path
import re
import subprocess
import sys
from typing import List

import typer


def linux_version_finder_single(single_script_path: str, commit: str) -> list[str]:
    """Retrieve Linux versions for a single commit

    Find the Linux versions where a commit is present or was backported"""
    completedProcess = subprocess.run(
        [single_script_path, commit],
        capture_output=True,
        check=True,
    )
    output = completedProcess.stdout.decode("utf-8")
    return output.split()


def get_minor_version(version: str) -> str:
    """Retrieve the Linux minor/major version

    Strip the suffix of "-rcX" or patch version ".X".
    E.g. "v5.9-rc2" -> "v5.9"
    E.g. "v3.2.1" -> "v3.2"."""
    m = re.match(r"^(v\d+\.\d+)", version)
    if not m:
        sys.exit("error: the " + version + " tag use an unexpected format")
    return m.group(1)


def get_minor_versions() -> list[str]:
    """Get complete list of minor/major versions

    E.g. ["v3.0", "v3.1", "v3.2"]."""
    completedProcess = subprocess.run(
        "git tag -l 'v*' | cut -d. -f-2 | cut -d- -f1 | sort -u -V | xargs",
        capture_output=True,
        check=True,
        shell=True,
    )
    return list(completedProcess.stdout.decode("utf-8").split())


def version_key(version: str) -> int:
    """Transform the Linux version in a integer

    This is done in order to compare the Linux versions."""
    m = re.match(r"^v\d+\.\d+\-rc(\d+)", version)
    if m:
        return int(m.group(1))

    m = re.match(r"^v\d+\.\d+\.(\d+)", version)
    if not m:
        sys.exit("error: the " + version + " tag use an unexpected format")
    return int(m.group(1)) * 10


def main(
    commits: List[str],
    debug: bool = typer.Option(False, help="Print debug info."),
):
    if debug:
        logging.basicConfig(level=logging.DEBUG)
    single_script_path = os.path.dirname(sys.argv[0]) + "/linux-version-finder-single"
    minor_versions = get_minor_versions()
    versions_count = collections.defaultdict(list)
    for commit in commits:
        minor_version = ""
        versions = linux_version_finder_single(single_script_path, commit)
        for version in versions:
            minor_version = get_minor_version(version)
            versions_count[minor_version].append(version)
        if minor_version:
            start = minor_versions.index(minor_version) + 1
            for i in range(start, len(minor_versions)):
                minor_version = minor_versions[i]
                versions_count[minor_version].append(minor_version + "-rc0")
    logging.debug(versions_count)

    len_commits = len(commits)
    first = True
    for minor_version in minor_versions:
        minor_version_count = versions_count[minor_version]
        if len_commits == len(minor_version_count):
            version = max(minor_version_count, key=version_key)
            if not version.endswith("rc0"):
                if first:
                    print(version, end="")
                    first = False
                else:
                    print("", version, end="")
    print("")


if __name__ == "__main__":
    typer.run(main)
